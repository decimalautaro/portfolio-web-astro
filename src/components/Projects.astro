---
import CssIcon from "../icons/Css.astro";
import DockerIcon from "../icons/Docket.astro";
import HtmlIcon from "../icons/Html.astro";
import JavascriptIcon from "../icons/Javascript.astro";
import MongoDBIcon from "../icons/MongoDB.astro";
import NestjsIcon from "../icons/Nestjs.astro";
import NodejsIcon from "../icons/Nodejs.astro";
import JestIcon from "../icons/Jest.astro";
import PostgresIcon from "../icons/Postgres.astro";
import TypeOrmIcon from "../icons/TypeORM.astro";
import TypescriptIcon from "../icons/Typescript.astro";
import GitHub from "../icons/GitHub.astro";
import SqliteIcon from "../icons/Sqlite.astro";
import StripeIcon from "../icons/Stripe.astro";
import KubernetesIcon from "../icons/Kubernetes.astro";
import LinkButton from "../components/LinkButton.astro";

const TAGS = {
  NODEJS: {
    name: "Node.js",
    icon: NodejsIcon,
  },
  NESTJS: {
    name: "Nest.js",
    icon: NestjsIcon,
  },
  HTML: {
    name: "HTML",
    icon: HtmlIcon,
  },
  CSS: {
    name: "CSS",
    icon: CssIcon,
  },
  TYPESCRIPT: {
    name: "Typescript",
    icon: TypescriptIcon,
  },
  JAVASCRIPT: {
    name: "Javascript",
    icon: JavascriptIcon,
  },
  DOCKER: {
    name: "Docker",
    icon: DockerIcon,
  },
  KUBERNETES: {
    name: "Kubernetes",
    icon: KubernetesIcon,
  },
  MONGODB: {
    name: "MongoDB",
    icon: MongoDBIcon,
  },
  POSTGRES: {
    name: "PostgreSQL",
    icon: PostgresIcon,
  },
  SQLITE: {
    name: "Sqlite",
    icon: SqliteIcon,
  },
  TYPEORM: {
    name: "TypeORM",
    icon: TypeOrmIcon,
  },
  JEST: {
    name: "Jest",
    icon: JestIcon,
  },
  STRIPE: {
    name: "Stripe",
    icon: StripeIcon,
  },
};

const PROJECTS = [
  {
    title: "Products-App",
    description: `Desarrollé este proyecto robusto utilizando Nest.js, implementando una arquitectura de microservicios que se comunica a través de NATS.
     La aplicación integra múltiples bases de datos, incluyendo SQLite, MongoDB y PostgreSQL, para optimizar el manejo de datos. 
     Utilicé Google Cloud para realizar despliegues continuos (CI/CD) y gestioné la orquestación de contenedores mediante Kubernetes, 
     garantizando escalabilidad y eficiencia en la infraestructura. Además, implementé Stripe para gestionar los pagos, 
     utilizando webhooks para asegurar una experiencia de transacción fluida y segura. Este proyecto combina tecnología moderna y 
     buenas prácticas de desarrollo para ofrecer una experiencia de usuario efectiva.`,

    github:
      "https://github.com/Nestjs-Microservices-Lautaro-Decima/products-launcher",
    image: "/projects/microservicios-nestjs.webp",
    tags: [
      TAGS.NESTJS,
      TAGS.TYPESCRIPT,
      TAGS.DOCKER,
      TAGS.KUBERNETES,
      TAGS.POSTGRES,
      TAGS.SQLITE,
      TAGS.MONGODB,
      TAGS.STRIPE,
    ],
  },
  {
    title: "App de colas - Websockets",
    description: `Esta aplicación de colas con websockets funciona como un sistema de turnos,
                  donde los usuarios pueden solicitar turnos desde una pantalla y visualizar en tiempo real desde otra pantalla
                  los turnos solicitados y su atención en tiempo real. Esta aplicación modelo fue desarrollada con fines educativos
                  para aprender sobre websockets, sin necesidad de utilizar un backend ni base de datos para su funcionamiento.`,

    github: "https://github.com/decimalautaro/websocket-app-colas",
    image: "/projects/app-colas-websocket.webp",
    tags: [TAGS.HTML, TAGS.CSS, TAGS.JAVASCRIPT, TAGS.TYPESCRIPT],
  },
  {
    title: "App-monitoreo - Node.js",
    description: `Aplicación de consola de monitoreo utilizando Node.js y aplicando el patrón de arquitectura limpia (Clean Architecture). 
                  Esta aplicación está diseñada para monitorear diversas APIs, almacenando datos simultáneamente en varias bases de datos. 
                  Además, envía informes por correo electrónico a uno o varios usuarios. 
                  Para asegurar la calidad del sistema, se implementaron pruebas unitarias utilizando Jest, cubriendo cada funcionalidad del sistema.
                  Esta aplicación se destaca por su capacidad para gestionar múltiples fuentes de datos y comunicar de manera proactiva cualquier 
                  irregularidad a través de informes detallados por correo electrónico, proporcionando así una herramienta esencial para la supervisión 
                  continua y eficaz de servicios en línea.`,

    github: "https://github.com/decimalautaro/app-monitoreo",
    image: "/projects/app-monitoreo.webp",
    tags: [
      TAGS.NODEJS,
      TAGS.TYPESCRIPT,
      TAGS.POSTGRES,
      TAGS.MONGODB,
      TAGS.DOCKER,
      TAGS.JEST,
    ],
  },
  {
    title: "Ecommerce - Nestjs",
    description: `API REST utilizando Nest.js y TypeScript, simulando un ecommerce completo. Para la persistencia de datos,
                  utilicé TypeORM, que facilita la generación de tablas y la gestión de relaciones entre ellas. Implementé relaciones
                  de uno a uno (1:1), uno a muchos (1 a N) y muchos a muchos (N a N), asegurando una estructura robusta y eficiente 
                  para el modelo de datos del ecommerce simulado. Esta configuración no solo permite la gestión integral de productos y usuarios, 
                  sino también la interacción fluida entre diferentes entidades clave del sistema.`,

    github:
      "https://github.com/decimalautaro/Ecommerce-NestJS-TypeORM-PostgreSQL",
    image: "/projects/ecommerce.webp",
    tags: [
      TAGS.NESTJS,
      TAGS.TYPESCRIPT,
      TAGS.POSTGRES,
      TAGS.DOCKER,
      TAGS.TYPEORM,
    ],
  },
  {
    title: "Social Network - Node.js",
    description: `API REST utilizando Node.js y TypeScript, utilizando MongoDB como base de datos no relacional. 
                  Esta API está diseñada como un clon de la popular red social Twitter.
                  MongoDB se seleccionó por su capacidad de almacenamiento flexible y su escalabilidad, lo que permite manejar 
                  eficientemente las características dinámicas y el flujo constante de datos que caracterizan a las redes sociales. 
                  La implementación incluye todas las funcionalidades principales de Twitter, como la gestión de perfiles de usuarios, 
                  publicaciones de tweets, seguimiento de usuarios, y más, asegurando una experiencia de usuario robusta y ágil.`,

    github: "https://github.com/decimalautaro/social-network-nodejs",
    image: "/projects/twiter.webp",
    tags: [TAGS.NODEJS, TAGS.TYPESCRIPT, TAGS.MONGODB, TAGS.DOCKER],
  },
];
---

<div class="grid gap-8 md:gap-12">
  {
    PROJECTS.map(({ title, description, tags, image, github }) => (
      <article class="flex flex-col md:flex-row items-start gap-6">
        <img
          class="rounded shadow-2xl shadow-white/10 w-full md:w-1/3"
          src={image}
          alt={`Captura de pantalla del proyecto ${title}`}
        />
        <div class="flex-1">
          <h3 class="text-xl md:text-2xl font-semibold text-yellow-200 mb-2">
            {title}
          </h3>
          <p class="text-sm md:text-base text-pretty mb-4">{description}</p>
          <ul class="flex flex-wrap gap-2 mb-4 justify-center md:justify-start">
            {tags.map((tag) => (
              <li>
                <span class="flex items-center gap-x-2 rounded-full text-xs py-1 px-2 bg-white/10 text-center">
                  <tag.icon />
                  {tag.name}
                </span>
              </li>
            ))}
          </ul>
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-5 md:size-6" />
              Code
            </LinkButton>
          )}
        </div>
      </article>
    ))
  }
</div>
